import { readdir, readFile, rename, writeFile } from 'node:fs/promises';
import { join, relative, basename, dirname } from 'node:path';
import { optimize, loadConfig } from 'svgo';

await loadConfig();
const icon_path = join(import.meta.dirname, 'src', 'lib', 'icons');
const barrel_file = join(import.meta.dirname, 'src', 'lib', 'index.js');
const barrel_file_source = ['// this file is automatically generated'];

async function* each_icon(dir) {
	const files = await readdir(dir, { withFileTypes: true });
	for (const file of files) {
		if (file.isDirectory()) {
			yield* each_icon(join(dir, file.name));
		} else {
			yield join(dir, file.name);
		}
	}
}

function to_pascal_case(str) {
	if (/^[a-z\d]+$/i.test(str)) {
		return str.charAt(0).toUpperCase() + str.slice(1);
	}
	return str
		.replace(/([a-z\d])([a-z\d]*)/gi, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase())
		.replace(/[^a-z\d]/gi, '');
}

for await (let file_path of each_icon(icon_path)) {
	if (file_path.endsWith('.svg')) {
		await rename(file_path, file_path.replace('.svg', '.svelte'));
		file_path = file_path.replace('.svg', '.svelte');
	}

	const file_name = basename(file_path);
	if (!file_path.endsWith('.svelte')) continue;
	const file_path_relative = relative(dirname(barrel_file), file_path);
	const component_name = to_pascal_case(file_name.replace('.svelte', ''));
	const svg = await readFile(file_path);
	const optimized = optimize(svg, {
		multipass: true
	});
	await writeFile(file_path, optimized.data);
	barrel_file_source.push(
		`export { default as Icon${component_name} } from "./${file_path_relative}";`
	);
}

await writeFile(barrel_file, barrel_file_source.join('\n'));

console.log(`icons generated at ${barrel_file}`);
